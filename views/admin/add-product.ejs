<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>
    <style>
        .error-message {
            color: red;
        }


        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }


        .thumbnail {
            margin-right: 10px;


        }
    </style>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="post" action="/admin/addproduct" enctype="multipart/form-data" onsubmit="return validateForm()
">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName"
                                    class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">

                                    <%for(let i=0;i<brand.length;i++){%>
                                        <option value="<%=brand[i].brandName%>">
                                            <%=brand[i].brandName%>
                                        </option>
                                        <%}%>

                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description"
                                    class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text"
                                            class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border">

                                    </div>
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border">
                                    </div>
                                    <div id="color-error" class="error-message"></div>
                                </div>

                            </div>
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="category">

                                                <%for(let i=0;i<cat.length;i++){%>
                                                    <option value="<%=cat[i].name%>">
                                                        <%=cat[i].name%>
                                                    </option>
                                                    <%}%>

                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose images</h4>
                                </div>
                                <div class="border row">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                </div>
                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView1">
                                        <input class="form-control" type="file" name="images" id="input1"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage1(event), viewImage(event, 1)">
                                        <div id="images-error" class="error-message"></div>
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg1" alt="">
                                        <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView2">


                                        <input class="form-control" type="file" name="images" id="input2"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage2(event),viewImage(event, 2)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg2" alt="">
                                        <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView3">


                                        <input class="form-control" type="file" name="images" id="input3"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage3(event),viewImage(event, 3)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg3" alt="">
                                        <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView4">



                                        <input class="form-control" type="file" name="images" id="input4"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage4(event),viewImage(event, 4)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg4" alt="">
                                        <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                            </div>
                    </div>
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" type="submit" onclick="validateForm()
">Publish</button>
                    </div>
                    </form>
                </div>
            </div>
        </div>
        </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>


        function viewImage1(event) {
            document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage2(event) {
            document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage3(event) {
            document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage4(event) {
            document.getElementById("imgView4").src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage(event, index) {
            let input = event.target;
            let reader = new FileReader();
            reader.onload = function () {
                let dataURL = reader.result;
                let image = document.getElementById("imgView" + index);
                image.src = dataURL;
                let cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true,
                });

                let cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
                cropperContainer.style.display = "block";

                let saveButton = document.querySelector("#saveButton" + index);
                saveButton.addEventListener("click", async function () {
                    let croppedCanvas = cropper.getCroppedCanvas();
                    let croppedImage = document.getElementById("croppedImg" + index);
                    croppedImage.src = croppedCanvas.toDataURL('img/jpg', 1.0);

                    let timestamp = new Date().getTime();
                    let fileName = `cropped-img-${timestamp}-${index}.png`;

                    await croppedCanvas.toBlob(blob => {
                        let input = document.getElementById('input' + index);
                        let imgFile = new File([blob],fileName, blob)
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files;
                    });

                    cropperContainer.style.display = 'none';
                    cropper.destroy();
                });
            };

            reader.readAsDataURL(input.files[0]);

        }

        const selectedImages = [];
        document.getElementById("input1").addEventListener("change", handleFileSelect);

        function handleFileSelect(event) {
            const addedImagesContainer = document.getElementById("addedImagesContainer");
            addedImagesContainer.innerHTML = "";
            const files = event.target.files;
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                selectedImages.push(file);
                const thumbnail = document.createElement("div");
                thumbnail.classList.add("thumbnail");

                const img = document.createElement("img");
                img.src = URL.createObjectURL(file);
                img.alt = "thumbnail";
                img.style.width = "50px";
                img.style.height = "auto";
                const removeIcon = document.createElement("span");
                removeIcon.classList.add("remove-icon");
                removeIcon.innerHTML = "&times;";
                removeIcon.addEventListener("click", function () {
                    const index = selectedImages.indexOf(file);
                    if (index !== -1) {
                        selectedImages.splice(index, 1);
                    }
                    thumbnail.remove()

                });
                thumbnail.appendChild(img);
                thumbnail.appendChild(removeIcon);
                addedImagesContainer.appendChild(thumbnail);
            }
        }


        function validateForm() {
    // Clear previous error messages
    clearErrorMessages();

    // Get form input values and trim
    const name = document.getElementsByName('productName')[0].value.trim();
    const description = document.getElementById('descriptionid').value.trim();
    const brand = document.getElementsByName('brand')[0].value.trim();
    const priceInput = document.getElementsByName('regularPrice')[0];
    const salePriceInput = document.getElementsByName('salePrice')[0];
    const color = document.getElementsByName('color')[0].value.trim();
    const category = document.getElementsByName('category')[0].value.trim();
    const images = document.getElementById('input1');
    const quantityInput = document.getElementsByName('quantity')[0];

    // Validation flag
    let isValid = true;

    // Strict Number Validation Function
    function validateStrictPositiveNumber(input, errorElementId, fieldName) {
        // Remove any non-numeric characters except decimal point
        let value = input.value.replace(/[^0-9.]/g, '');
        
        // Ensure only one decimal point
        const decimalParts = value.split('.');
        if (decimalParts.length > 2) {
            value = decimalParts[0] + '.' + decimalParts.slice(1).join('');
        }

        // Limit to 2 decimal places
        if (decimalParts.length === 2 && decimalParts[1].length > 2) {
            value = parseFloat(value).toFixed(2);
        }

        // Parse as float
        const numericValue = parseFloat(value);

        // Validation checks
        if (value === '' || isNaN(numericValue) || numericValue <= 0) {
            displayErrorMessage(errorElementId, `${fieldName} must be a positive number greater than zero.`);
            input.value = ''; // Clear invalid input
            input.focus();
            return false;
        }

        // Update input with cleaned value
        input.value = numericValue.toFixed(2);
        return true;
    }

    // Strict Quantity Validation
    function validateStrictQuantity(input, errorElementId) {
        // Remove any non-numeric characters
        let value = input.value.replace(/[^0-9]/g, '');

        // Parse as integer
        const numericValue = parseInt(value, 10);

        // Validation checks
        if (value === '' || isNaN(numericValue) || numericValue <= 0) {
            displayErrorMessage(errorElementId, 'Quantity must be a positive whole number greater than zero.');
            input.value = ''; // Clear invalid input
            input.focus();
            return false;
        }

        // Update input with cleaned value
        input.value = numericValue;
        return true;
    }

    // Name validation
    if (name === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    }

    // Description validation
    if (description === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    // Strict Quantity Validation
    const isQuantityValid = validateStrictQuantity(
        quantityInput, 
        'quantity-error'
    );
    if (!isQuantityValid) {
        isValid = false;
    }

    // Strict Price Validations
    const isRegularPriceValid = validateStrictPositiveNumber(
        priceInput, 
        'regularPrice-error', 
        'Regular Price'
    );
    const isSalePriceValid = validateStrictPositiveNumber(
        salePriceInput, 
        'salePrice-error', 
        'Sale Price'
    );

    if (!isRegularPriceValid || !isSalePriceValid) {
        isValid = false;
    }

    // Price Comparison
    const regularPrice = parseFloat(priceInput.value);
    const salePrice = parseFloat(salePriceInput.value);

    if (regularPrice <= salePrice) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }

    // Color validation
    if (color === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    // Images validation
    if (images.files.length === 0) {
        displayErrorMessage("images-error", 'Please select at least one image.');
        isValid = false;
    }

    return isValid;
}

// Prevent manual input of negative or zero values in real-time
function setupInputValidation() {
    const inputs = [
        document.getElementsByName('quantity')[0],
        document.getElementsByName('regularPrice')[0],
        document.getElementsByName('salePrice')[0]
    ];

    inputs.forEach(input => {
        input.addEventListener('input', function(e) {
            // Remove non-numeric characters
            this.value = this.value.replace(/[^0-9.]/g, '');
        });

        input.addEventListener('paste', function(e) {
            // Prevent pasting non-numeric content
            e.preventDefault();
            const pastedText = e.clipboardData.getData('text/plain').replace(/[^0-9.]/g, '');
            this.value = pastedText;
        });
    });
}

// Call setup on page load
document.addEventListener('DOMContentLoaded', setupInputValidation);

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = "none";
    });
}
    </script>

    <%- include("../../views/partials/admin/footer") %>